import geopandas as gpd
import matplotlib.pyplot as plt
import pandas as pd
from shapely.geometry import Point
from geopandas import GeoDataFrame

# Specify the path to the shapefile
path = r"../data/bgd_nhr_floods_barc"

# Read the shapefile into a GeoDataFrame
gdf = gpd.read_file(path)

# specify the path to the CSV file containing road data
path_roads = r"../data/_roads3.csv"

# Read the CSV file into a DataFrame
df = pd.read_csv(path_roads)

# Keep only the specified columns
df = df[['lon', 'lat', 'road', 'chainage']]

# Convert the 'df' DataFrame to a GeoDataFrame
geometry = [Point(xy) for xy in zip(df['lon'], df['lat'])]
df_geo = GeoDataFrame(df, geometry=geometry, crs="EPSG:4326")  # Ensure CRS matches gdf

# Perform a spatial join with gdf
merged_gdf = gpd.sjoin(df_geo, gdf, how="inner", predicate="intersects")

# Map the FLOODCAT values to adjust the categories
floodcat_mapping = {0: 0, 1: 3, 2: 2, 3: 1}  # Adjust 3 -> 1 and 1 -> 3

# Filter for relevant FLOODCAT values (0, 1, 2, 3)
filtered_gdf = merged_gdf[merged_gdf['FLOODCAT'].isin([0, 1, 2, 3])]

# Group by 'road' and calculate the average FLOODCAT
average_flood_score = (
    filtered_gdf.groupby('road')
    .agg(avg_flood_score=('FLOODCAT', 'mean'))  # Calculate the average FLOODCAT
    .reset_index()
)

# Normalize the average flood score (0 corresponds to 0, 1 corresponds to 2)
average_flood_score['avg_flood_score'] = average_flood_score['avg_flood_score'] / 3

#only show the relevant columns
average_flood_score =  average_flood_score[['road', 'avg_flood_score']]
# Display the final table
print(average_flood_score)

# Save the table to a CSV file
average_flood_score.to_csv("../data/processed_data/road_flood_scores.csv", index=False)

print("The normalized scores have been saved to '../data/processed_data/road_flood_scores.csv'.")
